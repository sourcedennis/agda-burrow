{-# OPTIONS --without-K --safe #-}

-- | An architecture-agnostic event specification.
--
-- Every event is parameterised by a `Label`, which represents the architecture-
-- specific event labeling. Different architectures may associate different
-- ordering behavior with any of those events. (e.g., acquire-reads or store-
-- fences in Arm)
module Burrow.Primitives where

-- Stdlib imports
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_≡_; _≢_; refl)
open import Relation.Nullary using (yes; no)
open import Data.Nat using (ℕ)
-- Local library imports
open import Dodo.Binary
-- Local imports
open import Burrow.Internal.Helpers


-- | File Structure:
--
-- > Primitives
-- > Operations
--   > Substitution
--     > Predicates
--     > `Same` structures
--   > Coercion
--     > Labels
--     > Sets
--   > Set splits
--   > Tag inequality
-- > Properties
--   > Uniqueness
--     > Values
--     > Proofs
--   > Symmetry
--   > Transitivity
--   > Set Relations
--   > Disjoint Sets


-- # Primitives


-- | Unique memory location
data Location : Set where location : ℕ → Location

-- | Value read/written to/from a memory cell during execution
--
--
-- # Design Decision: Natural Numbers
--
-- Actual values of memory cells on a machine are bounded by their bitwidth
-- (e.g., 32-bit or 64-bit). Instead, we model these values as natural numbers,
-- which is /more general/. These are also (slightly) easier to deal with.
data Value : Set where value : ℕ → Value

-- | Unique identifier of an event within an execution
data UniqueId : Set where unique-id : ℕ → UniqueId

-- | The thread in the execution on which the event occurs
--
-- Note that initialization events, which occur before the program starts, do
-- *not* have a thread ID.
data ThreadId : Set where thread-id : ℕ → ThreadId


-- # Label

-- | Syntax tags for events
--
-- Read events can be generated from either RMOV or RMW instructions; That
-- syntactic information is lost within our event structures. To distinguish
-- those cases, we tag them.
data Tag : Set where
  -- | Non-rmw read/write events. May also be an init event
  tmov : Tag
  -- | A read event generated by an RMW instruction. May be successful or failed.
  trmw : Tag

-- | An architecture specification.
--
-- Events are parametric over this. An architecture provides its own specific set
-- of labels for each event class (R/W/F).
record Arch : Set₁ where
  field
    -- # Data Types
    --
    -- Note that `LabW` represents (architecture-specific) *non-init* write
    -- events.
    LabR LabW LabF : Set

    -- # Properties

    -- Read/Write events have a tag, indicating whether it came from a regular
    -- move instruction or a RMW instruction.
    lab-r-tag : LabR → Tag
    lab-w-tag : LabW → Tag

    lab-r-dec≡ : Dec≡ LabR
    lab-w-dec≡ : Dec≡ LabW
    lab-f-dec≡ : Dec≡ LabF


tag-dec≡ : Dec≡ Tag
tag-dec≡ tmov tmov = yes refl
tag-dec≡ trmw trmw = yes refl
tag-dec≡ tmov trmw = no (λ ())
tag-dec≡ trmw tmov = no (λ ())

uid-dec≡ : Dec≡ UniqueId
uid-dec≡ (unique-id x) (unique-id y) =
  cong-dec≡ unique-id (λ{refl → refl}) (ℕ-dec≡ x y)

loc-dec≡ : Dec≡ Location
loc-dec≡ (location x) (location y) =
  cong-dec≡ location (λ{refl → refl}) (ℕ-dec≡ x y)

tid-dec≡ : Dec≡ ThreadId
tid-dec≡ (thread-id x) (thread-id y) =
  cong-dec≡ thread-id (λ{refl → refl}) (ℕ-dec≡ x y)

val-dec≡ : Dec≡ Value
val-dec≡ (value x) (value y) =
  cong-dec≡ value (λ{refl → refl}) (ℕ-dec≡ x y)

mov≢rmw : tmov ≢ trmw
mov≢rmw ()
